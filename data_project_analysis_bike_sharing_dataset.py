# -*- coding: utf-8 -*-
"""Data Project Analysis - Bike Sharing Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11Lws5H2QZxl50T0gqcnUuRpkNbs5Xt2Q

# Data Analysis Project: E-Commerce Public
- **Nama:** Muhammad Aqil
- **Email:** muhammad.aqil6604@gmai.com
- **ID Dicoding:** muhammad_aqil

## Business Questions

- What are the conditions observed when bicycles are used on working days, holidays, and weekends?
- Is there an influence of seasons on bicycle rentals based on Casual and Registered customers?

## Setup Data
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

from google.colab import drive
drive.mount('/content/drive')

"""## Data Wrangling

### Gathering Data

#### Load Tabel Day
"""

day_df = pd.read_csv('/content/drive/MyDrive/Bike-sharing-dataset/day.csv')
day_df.head()

"""####Load Tabel Hour"""

hr_df = pd.read_csv('/content/drive/MyDrive/Bike-sharing-dataset/hour.csv')
hr_df.head()

"""### Assessing Data

####Data Type day_df

1. Checking on Data Type day_df
"""

day_df.info()

"""There is 1 datatype didn't match with the coloumn, So need to be fixed with dteday -> datetime

2. Check Missing Values
"""

day_df.isna().sum()

"""We could have a conclusion that day_df table didn't have any missing values

3. Check Data Duplication
"""

print("Data Duplicated: ", day_df.duplicated().sum())

"""In day_df table there is 0 data duplicated, it means every data is unique

4. Checking for any anomalies in the statistical values
"""

day_df.describe()

"""We could see that there is no anomalies in the statistical values above

Data Type hr_df

1. Checking on Data Type hr_df
"""

hr_df.info()

"""There is 1 datatype didn't match with the coloumn, So need to be fixed with dteday -> datetime

2. Check Missing Values
"""

hr_df.isna().sum()

"""We could have a conclusion that hr_df table didn't have any missing values

3. Check Data Duplication
"""

print("Data Duplicated: ", hr_df.duplicated().sum())

"""In hr_df table there is 0 data duplicated, it means every data is unique

4. Checking for any anomalies in the statistical values
"""

hr_df.describe()

"""We could see that there is no anomalies in the statistical values above

### Cleaning Data

1. Deleting Irrelevant Table

Before we proceed to the next steps, we will first delete the 'hr' table. The reason is that it is not relevant to the business questions we have established, and in fact, the only difference between the 'hr' and 'day' tables is the 'hr' column; everything else is the same.
"""

del hr_df

"""2. Removing several columns that will not be used.

Based on the existing business questions, the columns to be dropped are:

instant: Because the record index does not provide any useful additional information.
windspeed: There are no business questions related to the effect of wind speed on the number of bike rentals.
"""

drop_col = ['instant', 'windspeed']

for i in day_df.columns:
  if i in drop_col:
    day_df.drop(labels=i, axis=1, inplace=True)

day_df.head()

"""3. Modifying some details about the columns.

Since the names of the columns above do not quite match my style, I will change them. I also prefer categorical data types, so I will convert some columns that were previously numeric. Additionally, some data types were not appropriate, and I will change those as well.
"""

# Changing Column Name
day_df.rename(columns={
    'dteday': 'dateday',
    'yr': 'year',
    'mnth': 'month',
    'weathersit': 'weather_cond',
    'cnt': 'count'
}, inplace=True)

day_df.head()

# Changing Number into Description
day_df['month'] = day_df['month'].map({
    1: 'Jan', 2: 'Feb', 3: 'Mar', 4: 'Apr', 5: 'May', 6: 'Jun',
    7: 'Jul', 8: 'Aug', 9: 'Sep', 10: 'Oct', 11: 'Nov', 12: 'Dec'
})
day_df['season'] = day_df['season'].map({
    1: 'Spring', 2: 'Summer', 3: 'Fall', 4: 'Winter'
})
day_df['weekday'] = day_df['weekday'].map({
    0: 'Sun', 1: 'Mon', 2: 'Tue', 3: 'Wed', 4: 'Thu', 5: 'Fri', 6: 'Sat'
})
day_df['weather_cond'] = day_df['weather_cond'].map({
    1: 'Clear/Partly Cloudy',
    2: 'Misty/Cloudy',
    3: 'Light Snow/Rain',
    4: 'Severe Weather'
})

# Converting Datatype into datetime
day_df['dateday'] = pd.to_datetime(day_df.dateday)

# Mengubaha tipe data ke categorical
day_df['season'] = day_df.season.astype('category')
day_df['year'] = day_df.year.astype('category')
day_df['month'] = day_df.month.astype('category')
day_df['holiday'] = day_df.holiday.astype('category')
day_df['weekday'] = day_df.weekday.astype('category')
day_df['workingday'] = day_df.workingday.astype('category')
day_df['weather_cond'] = day_df.weather_cond.astype('category')

day_df.head()

day_df.info()

"""## Exploratory Data Analysis (EDA)

### Explore Data day_df
####1. Bike Renter Grouping based on Month (both casual and registered)
"""

day_df.groupby(by='month').agg({
    'count': ['max', 'min', 'mean', 'sum']
})

"""Based on the results above, it can be concluded that the month with the highest average and the largest number is June, while the month with the lowest average and the smallest number is January.

2. Bike Renter Grouping based on weather conditions (both casual and registered)
"""

day_df.groupby(by='weather_cond').agg({
    'count': ['max', 'min', 'mean', 'sum']
})

"""Based on the results above, it can be concluded that bike renters tend to rent bicycles when the weather is clear or cloudy. Very few rentals occur when it is snowing, and there are none during extremely bad weather.

3. Bike Renter Grouping based on Holiday (both casual and registered)
"""

day_df.groupby(by='holiday').agg({
    'count': ['max', 'min', 'mean', 'sum']
})

"""Based on the results above, it can be concluded that bike renters prefer to rent bicycles on non-holiday days rather than on holidays.

4. Bike Renters Comparation on Weekdays and Weekends
"""

day_df.groupby(by='weekday').agg({
    'count':['max','min','mean']
})

"""Based on the results above, the order of the average number of renters from largest to smallest is: Friday (Fri), Thursday (Thu), Saturday (Sat), Wednesday (Wed), Tuesday (Tue), Monday (Mon), and Sunday (Sun)

5. Group bike renters (both casual and registered) based on working days
"""

day_df.groupby(by='workingday').agg({
    'count': ['max', 'min', 'mean']
})

"""Based on the results above, the highest number of bike rentals occurs on working days compared to non-working days. However, we can also see that the results are quite different, although not significantly.

6. Bike Renters Grouping based on Season (both casual and registered)
"""

day_df.groupby(by='season').agg({
    'casual': 'mean',
    'registered': 'mean',
    'count': ['max', 'min', 'mean']
})

"""Based on the analysis results above, both Casual and Registered bike renters prefer the fall season, as indicated by the average. In contrast, the least rentals occur in the spring season, with the lowest average.

7. Group temp, atemp and humidity based on season
"""

day_df.groupby(by='season').agg({
    'temp': ['max', 'min', 'mean'],
    'atemp': ['max', 'min', 'mean'],
    'hum': ['max', 'min', 'mean']
})

"""Based on the analysis results above, several statements can be concluded as follows:

- The highest average temperature and atemp occur in the fall season, followed by summer, winter, and spring.
- The highest average humidity occurs in the winter season, followed by fall, summer, and spring.

8. Relationship between casual renters, registered centers, and count
"""

fig, ax = plt.subplots(figsize=(10,6))
correlation_matrix = day_df.corr(numeric_only=True)
mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))

sns.heatmap(
    correlation_matrix,
    annot=True,
    mask=mask,
    cmap="coolwarm",
    center=0,
    fmt=".2f")
plt.title("Correlation Heatmap")
plt.show()

"""Based on the analysis results above, the following statements can be made:

- atemp and temp are highly correlated (0.99).
- hum has a weak correlation with temp and atemp (0.13 and 0.14).
- casual is moderately correlated with temp and atemp (0.54) and slightly negatively correlated with hum (-0.08).
- registered exhibits a similar pattern to casual and has a moderate correlation with casual (0.40).
- count is strongly correlated with temp, atemp, casual, and registered (0.63, 0.63, 0.67, and 0.95), and slightly negatively correlated with hum (-0.10).

## Visualization & Explanatory Analysis

### Question 1: What are the conditions observed when bicycles are used on working days, holidays, and weekends?
"""

import matplotlib.pyplot as plt
import seaborn as sns

fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(15, 10))

# Based on working day
sns.barplot(
    x='workingday',
    y='count',
    data=day_df,
    ax=axes[0],
    color='Maroon'
)
axes[0].set_title('Number of Bike Users Based on Working Days')
axes[0].set_xlabel('Working Days')
axes[0].set_ylabel('Number of Bike Users')

# Based on holiday
sns.barplot(
    x='holiday',
    y='count',
    data=day_df,
    ax=axes[1],
    color='gold'
)
axes[1].set_title('Number of Bike Users Based on Holidays')
axes[1].set_xlabel('Holidays')
axes[1].set_ylabel('Number of Bike Users')

# Based on weekday
sns.barplot(
    x='weekday',
    y='count',
    data=day_df,
    ax=axes[2],
)
axes[2].set_title('Number of Bike Users Based on Weekdays')
axes[2].set_xlabel('Days of the Week')
axes[2].set_ylabel('Number of Bike Users')

plt.tight_layout()
plt.show()

"""### Question 2: Is there an influence of seasons on bicycle rentals based on Casual and Registered customers?"""

# Grouping data by season and calculating the total registered and casual usage
seasonal_usage = day_df.groupby('season')[['registered', 'casual']].sum().reset_index()

plt.figure(figsize=(10, 6))

# Creating the bar plot
plt.bar(
    seasonal_usage['season'],
    seasonal_usage['registered'],
    label='Registered',
    color='maroon'
)

plt.bar(
    seasonal_usage['season'],
    seasonal_usage['casual'],
    label='Casual',
    color='gold'
)

plt.xlabel(None)
plt.ylabel(None)
plt.title('Number of Bike Rentals by Season')
plt.legend()
plt.show()

"""## Conclusion

- Conclution from Question 1 : The conditions displayed in this visualization are divided into three parts. For the number of bike users based on working days, working days outperform non-working days, although the difference is not very significant; there is still a clear distinction, with both being above 4000 users. Moving on to holidays, non-holidays win with a significant difference compared to holidays. This may indicate that users prefer to rent bikes on regular days. Lastly, based on weekdays, Friday ranks first with a mean of 4690.29, while Sunday ranks last with a mean of 4228.83.

- Conclution from Question 2 : Pada visualisasi terakhir, ternyata hasil yang didapatkan cukup mengejutkan dimana musim dingin (Winter) tidak menjadi yang terakhir, melainkan yang terakhir adalah musin semi (Spring). Hal ini bisa diakibatkan oleh banyak faktor seperti kondisi cuaca, temperatur udara, hari kerja, hari libur, dan lain-lain. Sedangkan urutan pertamanya ditempati oleh musim gugur (Fall) yang mampu meraih penyewaan sepeda sebanyak lebih dari 800000.
"""